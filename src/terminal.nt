module terminal;

macro import neat.macros.assert;
macro import neat.macros.cimport;
macro import neat.macros.listcomprehension;

import c_header("ctype.h");
import c_header("locale.h");
import c_header("stdio.h");
import c_header("stdlib.h");
import c_header("sys/ioctl.h");
import c_header("termios.h");
import c_header("unistd.h");
import c_header("wchar.h");

import helpers : itoa;

import utf;

extern(C) int neat_runtime_errno();

// TODO fix C import
struct timespec {
    time_t tv_sec;
    long tv_nsec;
}

extern(C) int nanosleep(timespec* req, timespec* rem);

enum SpecialKey {
    Enter, Backspace, Escape,
    Left, Right, Up, Down,
    F1, F2, F3, F4,
    F5, F6, F7, F8,
    F9, F10, F11, F12,
}

alias InputEvent = (:key, string text | (:specialKey, SpecialKey key));

class Widget
{
    void render(View view, bool focus) { }

    void input(InputEvent event) { }
}

abstract class Activity
{
    abstract void update() { }
}

class Terminal
{
    termios original;

    Buffer currentScreenState;

    Widget widget;

    bool running;

    (int rows, int cols) getSize() {
        mut winsize sz;
        ioctl(0, TIOCGWINSZ, &sz);
        return (sz.ws_row, sz.ws_col);
    }

    this(this.widget) {
        auto sz = getSize;

        this.currentScreenState = new Buffer(sz.rows, sz.cols);
        this.running = true;
    }

    void update(Activity activity) {
        auto sz = getSize;
        auto newbuf = new Buffer(sz.rows, sz.cols);
        auto view = newbuf.view;

        view.clear(Color.blue);
        activity.update;
        widget.render(view, true);
        paint(newbuf);
    }

    void updateLoop(Activity activity) {
        setlocale(__LC_ALL, "".toStringz);
        enableRawMode;
        mut int available = 0;
        int waitwchar((:update|:none) doUpdate) {
            while (running) {
                while (available == 0) {
                    doUpdate.case {
                        (:update): update(activity);
                        (:none): { }
                    }
                    for (mut int i = 0; i < 10; i += 1) {
                        int data;
                        ioctl(0, FIONREAD, &data);
                        if (data == 0) {
                            timespec sleep = timespec(0, 10000000);
                            nanosleep(&sleep, null);
                            continue;
                        }
                        available = data;
                        break;
                    }
                }
                int c = getwchar;
                if (c == -1 && neat_runtime_errno() == 84) {
                    print("EILSEQ");
                    assert(false);
                }
                // .print(itoa(c));
                if (c == 0) continue;
                if (c > 127) available = 0; // assume utf-8 and all was consumed (?)
                else available -= 1; // assume we're reading a multi-char input like ESC sequence
                return c;
            }
        }
        while (running) {
            int c = waitwchar(:update);
            if (c == 10) {
                widget.input((:specialKey, SpecialKey.Enter));
                continue;
            }
            if (c == 27) {
                if (available == 0) {
                    widget.input((:specialKey, SpecialKey.Escape));
                    continue;
                }
                if (cast(char) waitwchar(:none) == "["[0]) {
                    // ansi sequence
                    // if you type alt-[, this loop is where the program will hang.
                    mut string ansi;
                    while (true) {
                        char ch = cast(char) waitwchar(:none);
                        if (ch == "~"[0]) break;
                        ansi ~= ch;
                        // xterm
                        if (ansi.length == 1 && [any ch == ansi[0] for ch in "ABCDEFGHIJKLMNOPQRSTUVWXYZ"]) {
                            break;
                        }
                        if (ansi == "1P" || ansi == "1Q" || ansi == "1R" || ansi == "1S") {
                            break;
                        }
                    }
                    if (ansi == "11" || ansi == "1P") widget.input((:specialKey, SpecialKey.F1));
                    else if (ansi == "12" || ansi == "1Q") widget.input((:specialKey, SpecialKey.F2));
                    else if (ansi == "13" || ansi == "1R") widget.input((:specialKey, SpecialKey.F3));
                    else if (ansi == "14" || ansi == "1S") widget.input((:specialKey, SpecialKey.F4));
                    else if (ansi == "15") widget.input((:specialKey, SpecialKey.F5));
                    else if (ansi == "17") widget.input((:specialKey, SpecialKey.F6));
                    else if (ansi == "18") widget.input((:specialKey, SpecialKey.F7));
                    else if (ansi == "19") widget.input((:specialKey, SpecialKey.F8));
                    else if (ansi == "20") widget.input((:specialKey, SpecialKey.F9));
                    else if (ansi == "21") widget.input((:specialKey, SpecialKey.F10));
                    else if (ansi == "23") widget.input((:specialKey, SpecialKey.F11));
                    else if (ansi == "24") widget.input((:specialKey, SpecialKey.F12));
                    else if (ansi == "A") widget.input((:specialKey, SpecialKey.Up));
                    else if (ansi == "B") widget.input((:specialKey, SpecialKey.Down));
                    else if (ansi == "C") widget.input((:specialKey, SpecialKey.Right));
                    else if (ansi == "D") widget.input((:specialKey, SpecialKey.Left));
                    continue;
                }
            }
            if (c == 127 || c == 8) {
                widget.input((:specialKey, SpecialKey.Backspace));
                continue;
            }
            if (c == 9 || !iscntrl(c)) {
                auto buffer = new char[](16);
                int len = wctomb(buffer.ptr, c);
                widget.input((:key, buffer[0 .. len]));
            }
        }
        disableRawMode;
    }

    void paint(Buffer newBuf) {
        // TODO compare tuples
        bool refresh = newBuf.rows != currentScreenState.rows || newBuf.cols != currentScreenState.cols;
        mut Color fg, bg;
        for (int i <- 0 .. newBuf.rows) {
            auto line = newBuf.line(i);
            mut bool mustGoTo = true;
            for (int k <- 0 .. newBuf.cols) {
                auto tile = line[k];
                if (!refresh) {
                    auto oldLine = currentScreenState.line(i);
                    auto oldTile = oldLine[k];
                    if (tile.eq(oldTile)) {
                        mustGoTo = true;
                        continue;
                    }
                }
                if (mustGoTo) {
                    puts("\x1B[" ~ itoa(i + 1) ~ ";" ~ itoa(k + 1) ~ "H");
                    mustGoTo = false;
                }
                if (fg != tile.fg || bg != tile.bg) {
                    int translate(Color c) {
                        int i = cast(int) c;
                        if (i > 7) return 90 + i - 8;
                        return 30 + i;
                    }
                    puts("\x1B[" ~ itoa(translate(tile.fg)) ~ ";" ~ itoa(translate(tile.bg) + 10) ~ "m");
                    fg = tile.fg;
                    bg = tile.bg;
                }
                puts(tile.ch);
            }
        }
        puts("\x1B[" ~ itoa(newBuf.row + 1) ~ ";" ~ itoa(newBuf.col + 1) ~ "H");
        // TODO why does this leak otherwise?
        this.currentScreenState.text = [];
        this.currentScreenState = newBuf;
    }

    void enableRawMode() {
        tcgetattr(STDIN_FILENO, &this.original);
        mut auto raw = this.original;
        raw.c_lflag = raw.c_lflag & (ECHO | ICANON).bitflip;
        // raw.c_cc[VMIN] = 0;
        // raw.c_cc[VTIME] = 1;
        // raw.c_cc._6 = 0;
        // raw.c_cc._5 = 1;
        tcsetattr(STDIN_FILENO, TCSANOW, &raw);
        // puts("\x1B[?1049h");
    }

    void disableRawMode() {
        tcsetattr(STDIN_FILENO, TCSANOW, &original);
        puts("\x1B[?1049l");
    }
}

struct Tile
{
    string ch; // may be unicode, TODO int
    Color fg, bg;

    // TODO default gen
    bool eq(Tile other) {
        return ch == other.ch && fg == other.fg && bg == other.bg;
    }
}

enum Color
{
    black,
    red,
    green,
    yellow,
    blue,
    magenta,
    cyan,
    white,
    grey,
    lred,
    lgreen,
    lyellow,
    lblue,
    lmagenta,
    lcyan,
    lwhite
}

final class View
{
    Buffer target;

    // relative to viewmask
    int row, col;

    // print state
    Color fg_, bg_;

    // TODO decouple viewmask from rows/cols so we can have windows half-hidden behind surrounding decoration
    ((int row, int col) from, (int row, int col) to) viewmask;

    this(this.target, int from_row, int from_col, int to_row, int to_col) {
        this.viewmask = ((from_row, from_col), (to_row, to_col));
        this.fg_ = Color.lwhite;
        this.bg_ = Color.black;
    }

    View like(int from_row, int from_col, int to_row, int to_col) {
        auto view = new View(this.target, from_row, from_col, to_row, to_col);
        view.fg_ = this.fg_;
        view.bg_ = this.bg_;
        return view;
    }

    int rows() { return viewmask.to.row - viewmask.from.row; }

    int cols() { return viewmask.to.col - viewmask.from.col; }

    int rowsLeft() { return cols - col; }

    void putchar(int row, int col, string ch) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            int targetRow = row + this.viewmask.from.row;
            int targetCol = col + this.viewmask.from.col;

            this.target.text[targetRow * target.cols + targetCol] = Tile(ch, this.fg_, this.bg_);
        }
    }

    View print(string msg) {
        mut int i;
        while (i < msg.length) {
            auto chlen = msg[i .. $].utf8NextLength;
            auto ch = msg[i .. i + chlen];
            putchar(row=this.row, col=this.col, ch=ch);
            i += chlen;
            this.col += 1;
        }
        return this;
    }

    View printRight(string msg) {
        // TODO cutoff
        int start = this.row * this.cols;
        for (int i <- this.col .. this.cols - msg.utf8Length) {
            putchar(row=this.row, col=i, ch=" ");
            this.col += 1;
        }
        mut int k;
        for (int i <- 0 .. msg.utf8Length) {
            auto chlen = msg[k .. $].utf8NextLength;
            auto ch = msg[k .. k + chlen];
            k += chlen;
            putchar(row=this.row, col=this.col, ch=ch);
            this.col += 1;
        }
        return this;
    }

    View go(mut int row, mut int col) {
        if (row < 0) row = this.rows - -row;
        if (col < 0) col = this.cols - -col;
        this.row = row;
        this.col = col;
        return this;
    }

    View fg(Color fg) {
        this.fg_ = fg;
        return this;
    }

    View bg(Color bg) {
        this.bg_ = bg;
        return this;
    }

    View clear(Color bg) {
        this.bg_ = bg;
        for (int y <- 0 .. this.rows) {
            for (int x <- 0 .. this.cols) {
                putchar(row=y, col=x, ch=" ");
            }
        }
        return this;
    }

    View skip(int cols) {
        this.col += cols;
        return this;
    }

    View shrink(int top_rows, int left_cols, int bottom_rows, int right_cols) {
        return this.like(
            viewmask.from.row + top_rows, viewmask.from.col + left_cols,
            viewmask.to.row - bottom_rows, viewmask.to.col - right_cols);
    }

    View select(int from_row, int from_col, int to_row, int to_col) {
        // TODO crop viewmask with own mask
        return this.like(
            viewmask.from.row + from_row, viewmask.from.col + from_col,
            viewmask.from.row + to_row, viewmask.from.col + to_col);
    }

    View fillRow() {
        int base = this.row * this.cols + this.col;
        for (int i <- 0 .. this.cols - this.col) {
            putchar(row=this.row, col=this.col + i, ch=" ");
        }
        return this;
    }
}

class Buffer
{
    int rows, cols;

    Tile[] text;

    int row, col;

    this(this.rows, this.cols) {
        this.text = new Tile[](this.rows * this.cols);
    }

    View view() {
        return new View(this, 0, 0, rows, cols);
    }

    Tile[] line(int row) {
        return this.text[this.cols * row .. this.cols * (row + 1)];
    }
}

// TODO variadics
extern(C) int ioctl(int, int, void*);

void puts(string msg) {
    write(STDOUT_FILENO, msg.ptr, msg.length);
}

int bitflip(int i) { return -i - 1; }
