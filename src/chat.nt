module chat;

macro import neat.macros.assert;
macro import neat.macros.cimport;
macro import neat.macros.listcomprehension;

import c_header("ctype.h");
import c_header("locale.h");
import c_header("stdlib.h");
import c_header("string.h");
import c_header("unistd.h");
import c_header("wchar.h");

import helpers : itoa, print;
import std.string;

import irc;
import terminal;
import time;
import utf;

struct MenuEntry
{
    string name;
    void delegate() action;
}

struct SubMenu
{
    string name;
    (MenuEntry[] | void delegate()) content;

    MenuEntry[] subEntries() {
        content.case {
            void delegate(): { assert(false); }
            MenuEntry[] subEntries: return subEntries;
        }
    }
}

class MenuBar : Widget
{
    Application app;

    SubMenu[] entries;

    int xsel, ysel;
    bool open;
    bool damaged_;

    this(this.app, this.entries) { this.damaged_ = true; }

    override bool damaged() { return this.damaged_; }

    override void render(View view, bool focus) {
        this.damaged_ = false;
        // title line
        view.go(0, 0);
        view.print(" ");
        for (i in 0 .. entries.length) {
            bool entrySelected = focus && i == xsel;
            auto entry = entries[i];
            view.bg(Color.grey).print("  ");
            if (entrySelected) {
                int startCol = view.col;
                view.bg(Color.black);
                view.fg(Color.red).print(entry.name[0 .. 1]);
                view.fg(Color.grey).print(entry.name[1 .. $]);
                if (open) {
                    auto subentries = entry.subEntries;
                    int maxlen = [max cast(int) e.name.length for e in subentries base 10];
                    mut auto submenu = view.select(
                        view.row + 1,
                        startCol,
                        view.row + cast(int) subentries.length + 3,
                        startCol + maxlen + 4
                    );
                    submenu.fg(Color.black).clear(Color.grey).printPrettyBox;
                    submenu = submenu.shrink(1, 1, 1, 1);
                    for (j in 0 .. subentries.length) {
                        int j = cast(int) j;
                        auto subentry = subentries[j];
                        bool subSelected = focus && j == ysel;
                        submenu.go(j, 0).bg(Color.grey).print(" ");
                        if (subSelected) {
                            submenu.bg(Color.black);
                            submenu.fg(Color.red).print(subentry.name[0 .. 1]);
                            submenu.fg(Color.grey).print(subentry.name[1 .. $]);
                        } else {
                            submenu.fg(Color.red).print(subentry.name[0 .. 1]);
                            submenu.fg(Color.black).print(subentry.name[1 .. $]);
                        }
                    }
                }
            } else {
                view.bg(Color.grey);
                view.fg(Color.red).print(entry.name[0 .. 1]);
                view.fg(Color.black).print(entry.name[1 .. $]);
            }
        }
        view.bg(Color.grey).fillRow;
    }

    void menuRight() {
        int xlen = cast(int) entries.length;
        xsel = (xsel + 1) % xlen;
        if (!open) return;
        fixOpenMenu;
    }

    void menuLeft() {
        int xlen = cast(int) entries.length;
        xsel = (xsel - 1 + xlen) % xlen;
        if (!open) return;
        fixOpenMenu;
    }

    void menuDown() {
        assert(open);
        int ylen = cast(int) entries[xsel].subEntries.length;
        ysel = (ysel + 1) % ylen;
    }

    void menuUp() {
        assert(open);
        int ylen = cast(int) entries[xsel].subEntries.length;
        ysel = (ysel - 1 + ylen) % ylen;
    }

    void menuOpen() {
        entries[xsel].content.case {
            void delegate() action: { }
            MenuEntry[] subentries: open = true;
        }
    }

    void menuActivate() {
        void do_(void delegate() action) {
            // defocus the menu at any rate, even if the entry takes focus
            this.app.focusMain;
            open = false;
            action();
        }
        entries[xsel].content.case {
            void delegate() action: {
                assert(!open);
                do_(action);
            }
            MenuEntry[] subentries: {
                if (!open) open = true;
                else do_(subentries[ysel].action);
            }
        }
    }

    void fixOpenMenu() {
        entries[xsel].content.case {
            void delegate(): { open = false; }
            MenuEntry[] subentries: {
                if (ysel >= subentries.length)
                    ysel = cast(int) subentries.length - 1;
            }
        }
    }

    override void input(InputEvent event) {
        event.case {
            (:specialKey, SpecialKey key): {
                if (key == SpecialKey.Escape) { open = false; this.app.focusMain; }
                else if (key == SpecialKey.Right) menuRight;
                else if (key == SpecialKey.Left) menuLeft;
                else if (key == SpecialKey.Down) {
                    if (!open) menuOpen;
                    else menuDown;
                }
                else if (key == SpecialKey.Up) {
                    if (!open) menuOpen;
                    if (open) menuUp;
                }
                else if (key == SpecialKey.Enter) {
                    menuActivate;
                }
                else return;
                this.damaged_ = true;
            }
            (:key, string key): { }
        }
    }
}

class Window : Widget
{
    string title;

    int rows, cols;

    Widget body_;

    this(this.title, this.rows, this.cols, this.body_) {}

    override bool damaged() { return body_.damaged; }

    override void render(View view, bool focus) {
        mut auto subview = view.select(
            view.rows / 2 - rows / 2, view.cols / 2 - cols / 2,
            view.rows / 2 + rows / 2, view.cols / 2 + cols / 2);
        subview.bg(Color.grey).fg(Color.black).printPrettyBox;
        subview.go(0, subview.cols / 2 - cast(int) title.length / 2 - 2);
        subview.print("┤ ");
        if (focus) subview.fg(Color.lwhite);
        else subview.fg(Color.white);
        subview.print(title).fg(Color.black).print(" ├");

        subview = subview.shrink(1, 1, 1, 1);
        subview.clear(Color.grey);
        body_.render(subview, focus);
    }

    override void input(InputEvent event) {
        body_.input(event);
    }
}

struct ListEntry
{
    string label;
    Widget widget;
}

class ListDialog : Widget
{
    ListEntry[] entries;

    (int | :cancel | :ok) position;

    bool damaged_;

    this(this.entries) { position = 0; damaged_ = true; }

    void ok() { }
    void cancel() { }

    override bool damaged() { return this.damaged_ || [any e.widget.damaged for e in this.entries]; }

    override void render(View view, bool focus) {
        damaged_ = false;
        mut View view = view.shrink(1, 1, 0, 1); // margin
        mut int row = 0;
        int labels = [max cast(int) entry.label.length for entry in entries] + 2;
        for (i in 0 .. entries.length) {
            bool focused = position.case((:cancel): false, (:ok): false, int j: j == i);
            auto entry = entries[i];
            // give it the whole view in case it wants to render say a dropdown
            // (we don't have dropdowns. but we COULD)
            if (i > 0) view = view.shrink(1, 0, 0, 0);
            view.print(entry.label);
            auto subview = view.shrink(0, labels, 0, 0);
            if (focused) subview.bg(Color.blue).fg(Color.lwhite);
            entry.widget.render(subview, focused);
        }
        auto bottomRow = view.select(view.rows - 1, 0, view.rows, view.cols);
        bool cancelFocused = position.case((:cancel): true, (:ok): false, int: false);
        bool okFocused = position.case((:cancel): false, (:ok): true, int: false);
        if (cancelFocused) bottomRow.bg(Color.blue).fg(Color.lwhite);
        else bottomRow.bg(Color.grey).fg(Color.black);
        bottomRow.go(0, 2).print("< Cancel >");
        if (okFocused) bottomRow.bg(Color.blue).fg(Color.lwhite);
        else bottomRow.bg(Color.grey).fg(Color.black);
        bottomRow.go(0, -8).print("< OK >");
    }

    void nextPosition() {
        (int | :cancel) nextOffset(int offset) {
            int result = offset + 1;
            if (result < entries.length) return result;
            else return :cancel;
        }
        position = position.case(
            (:cancel): :ok,
            (:ok): nextOffset(-1),
            int offset: nextOffset(offset));
    }
    void prevPosition() {
        (int | :ok) prevOffset(int offset) {
            int result = offset - 1;
            if (result >= 0) return result;
            else return :ok;
        }
        position = position.case(
            (:cancel): prevOffset(cast(int) entries.length),
            (:ok): :cancel,
            int offset: prevOffset(offset));
    }

    override void input(InputEvent event) {
        event.case {
            (:specialKey, SpecialKey key): {
                mut bool keyUsed = true;
                if (key == SpecialKey.Escape) {
                    cancel;
                }
                else if (key == SpecialKey.Enter) {
                    position.case {
                        (:cancel): cancel;
                        (:ok): ok;
                        int offset: ok;
                    }
                }
                else if (key == SpecialKey.Down) nextPosition;
                else if (key == SpecialKey.Up) prevPosition;
                else keyUsed = false;
                if (keyUsed) {
                    this.damaged_ = true;
                    return;
                }
            }
            (:key, string text): {
                if (text == "\t") {
                    nextPosition;
                    this.damaged_ = true;
                    return;
                }
            }
        }
        position.case {
            (:cancel): { }
            (:ok): { }
            int offset:
                entries[offset].widget.input(event);
        }
    }
}

class InputField : Widget
{
    size_t cursorPos;

    private string line_;

    (size_t cursorPos, string line) rendered;

    this(this.line_) { }

    override bool damaged() { return (cursorPos, line_) != rendered; }

    void erase() {
        line_ = "";
        cursorPos = 0;
    }

    string line() { return line_; }

    string undamage() {
        rendered = (cursorPos, line_);
    }

    void renderLine(View view) {
        string cursor() {
            if (cursorPos < line_.length) {
                return line_[cursorPos .. $].(that[0 .. that.utf8NextLength]);
            }
            return " ";
        }
        string rest() {
            if (cursorPos < line_.length) {
                return line_[cursorPos .. $].(that[that.utf8NextLength .. $]);
            }
            return null;
        }
        view
            .print(line_[0 .. cursorPos])
            .invert
            .print(cursor)
            .invert
            .print(rest)
        ;
    }

    override void render(View view, bool focus) {
        undamage;
        auto view = view.go(0, 0).print("[ ");
        renderLine(view);
        view.printRight(" ]");
    }

    override void input(InputEvent event) {
        void stepLeft() {
            if (cursorPos == 0) return;
            cursorPos -= line[0 .. cursorPos].utf8LastLength;
        }
        void stepRight() {
            if (cursorPos == line.length) return;
            cursorPos += line[cursorPos .. $].utf8NextLength;
        }
        void delete_() {
            if (cursorPos == line.length) return;
            line_ = line_[0 .. cursorPos] ~ line_[cursorPos .. $].(that[that.utf8NextLength .. $]);
        }
        void home() {
            cursorPos = 0;
        }
        void end() {
            cursorPos = line.length;
        }
        event.case {
            (:specialKey, SpecialKey key): {
                if (key == SpecialKey.Backspace) {
                    if (line.length > 0 && cursorPos > 0) {
                        stepLeft;
                        delete_;
                    }
                }
                if (key == SpecialKey.Delete) delete_;
                if (key == SpecialKey.Left) stepLeft;
                if (key == SpecialKey.Right) stepRight;
                if (key == SpecialKey.Home) home;
                if (key == SpecialKey.End) end;
            }
            (:key, string text): {
                line_ = line_[0 .. cursorPos] ~ text ~ line_[cursorPos .. $];
                stepRight;
            }
        }
    }
}

class StatusBar : Widget {
    string lastStatus;
    string lastTime;
    this() { }
    override bool damaged() { return status != lastStatus || time != lastTime; }
    string status() {
        return " chat.com - Press F9 for Menu.";
    }
    string time() {
        return Time.now.local;
    }
    override void render(View view, bool focus) {
        view.go(-1, 0).bg(Color.grey).fg(Color.black);
        view.print(status);
        view.printRight("[ " ~ time ~ " ] ");
        lastStatus = status;
        lastTime = time;
    }
    override void input(InputEvent event) {
        // this shouldn't be able to gain focus.
        assert(false);
    }
}

class Application : Activity
{
    IRC irc;

    Terminal term;

    UserInterface ui;

    bool connected;
    string nick, channel;

    override bool update() {
        if (irc.ready) irc.pump;
        return ui.damaged;
    }

    this(this.irc) {
        mut SubMenu[] menu;
        void help() { }
        menu ~= SubMenu("Application", [
            MenuEntry("Connect...", &connectDlg),
            // MenuEntry("Reconnect", &exit),
            // MenuEntry("Join...", &exit),
            MenuEntry("Quit", &exit)
        ]);
        menu ~= SubMenu("Help", &help);
        auto menu = new MenuBar(this, menu);
        auto chat = new ChatWidget(this);
        this.ui = new UserInterface(menu, new StatusBar, chat);
    }

    void focusMain() {
        this.ui.focus = :mainOrPopup;
        this.ui.damaged_ = true;
    }

    void focusMenu() {
        this.ui.focus = :menuBar;
        this.ui.damaged_ = true;
    }

    void connectDlg() {
        this.ui.popupStack ~= new Window("Connect to Server", 10, 50, new ConnectDialog(this));
        this.ui.damaged_ = true;
    }

    void exit() {
        this.term.running = false;
    }
}

class ChatWidget : Widget
{
    Application app;

    string channel;

    // Not rendered.
    InputField inputField;

    int renderedGeneration;

    this(this.app) { this.inputField = new InputField(""); }

    override bool damaged() { return inputField.damaged || app.irc.generation != renderedGeneration; }

    override void render(View view, bool focus) {
        inputField.undamage;
        renderedGeneration = app.irc.generation;
        mut View view = view;
        auto irc = app.irc;
        // TODO master list of connections to refresh?

        // chat box
        view.fg(Color.lwhite).bg(Color.blue).printPrettyBox;

        // input line
        view.go(-1, 2);
        view.bg(Color.blue).fg(Color.lwhite);
        view.print("┤");
        view.bg(Color.blue).printRight("├──┘");
        view.fg(Color.lyellow);
        inputField.renderLine(view.go(-1, 3).print(" "));

        view = view.shrink(1, 1, 1, 1);

        string[] splitLines(Message msg) {
            int space = view.cols - cast(int) (" [00:00:00] <".length + msg.name.length + "> ".length);
            assert(space > 0);

            mut string[] result;
            mut string remainder = msg.line;
            while (remainder.length > 0) {
                auto prefix = remainder.takeTiles(space);
                result ~= prefix;
                remainder = remainder[prefix.length .. $];
            }
            return result;
        }
        int needsLines(Message msg) {
            // TODO without allocation?
            return cast(int) msg.splitLines.length;
        }

        int availableLines = view.rows;
        mut int usedLines;
        mut int firstMessage = cast(int) irc.messages.length;
        while (firstMessage > 0) {
            firstMessage -= 1;
            usedLines += irc.messages[firstMessage].needsLines;
            if (usedLines >= availableLines)
                break;
        }
        mut int paneRow = availableLines - usedLines;
        for (msg in irc.messages[firstMessage .. $]) {
            string[] msgLines = msg.splitLines;
            for (mut int i = 0; i < msgLines.length; i += 1) {
                view.go(paneRow, 0);
                if (i == 0) {
                    view.bg(Color.blue).fg(Color.black).print(" [" ~ msg.time.local ~ "]");
                    view.skip(1).fg(Color.white).print("<");
                    view.fg(Color.lwhite).print(msg.name);
                    view.fg(Color.white).print(">").skip(1);
                } else {
                    view.skip(cast(int) ("[00:00:00] <".length + msg.name.length + "> ".length));
                }
                paneRow += 1;
                view.fg(Color.lwhite).print(msgLines[i]);
            }
        }
    }

    override void input(InputEvent event) {
        event.case {
            (:specialKey, SpecialKey key): {
                if (key == SpecialKey.Enter) {
                    // TODO IRC session engine class
                    string line = inputField.line;
                    inputField.erase;

                    if (line == "/q" || line == "/quit") {
                        if (app.connected) app.irc.sendln("QUIT");

                        app.term.running = false;
                        return;
                    }
                    string channel = app.channel;
                    string nick = app.nick;
                    if (line.startsWith("/me ")) {
                        string action = line[4 .. $];
                        if (app.connected) {
                            app.irc.mutated;
                            app.irc.messages ~= Message(Time.now, nick, "* " ~ nick ~ " " ~ action);
                            app.irc.sendln("PRIVMSG " ~ channel ~ " :\x01ACTION " ~ action ~ "\x01");
                        }
                        return;
                    }
                    if (app.connected) {
                        app.irc.mutated;
                        app.irc.messages ~= Message(Time.now, nick, line);
                        app.irc.sendln("PRIVMSG " ~ channel ~ " :" ~ line);
                    }
                    return;
                }
                if (key == SpecialKey.F9) {
                    app.focusMenu;
                    return;
                }
            }
            (:key, string text): { }
        }
        inputField.input(event);
    }
}

class UserInterface : Widget
{
    Widget menuBar;

    Widget statusBar;

    Widget mainView;

    Widget[] popupStack;

    (:menuBar | :mainOrPopup) focus;

    bool damaged_;

    this(this.menuBar, this.statusBar, this.mainView) {
        this.focus = :mainOrPopup;
        this.damaged_ = true;
    }

    bool menuBarHasFocus() { return focus.case((:menuBar): true, (:mainOrPopup): false); }
    bool mainPopupHasFocus() { return focus.case((:menuBar): false, (:mainOrPopup): true); }

    override bool damaged() {
        return damaged_ || menuBar.damaged || statusBar.damaged || mainView.damaged ||
            [any a.damaged for a in popupStack];
    }

    void removePopup(Widget widget) {
        // remove widget, move other widgets back to match, then shorten stack
        damaged_ = true;
        mut int removing = 0;
        for (i in 0 .. popupStack.length) {
            if (popupStack[i] is widget) {
                removing += 1;
            }
            else if (auto wnd = popupStack[i].instanceOf(Window)) {
                if (wnd.body_ is widget) {
                    removing += 1;
                }
            }
            if (i + removing >= popupStack.length)
                break;
            popupStack[i] = popupStack[i + removing];
        }
        popupStack = popupStack[0 .. $ - removing];
    }

    override void render(View view, bool focus) {
        assert(focus); // as opposed to what
        damaged_ = false;

        mainView.render(view.shrink(top_rows=1, 0, bottom_rows=1, 0), mainPopupHasFocus && !popupStack.length);
        statusBar.render(view.shrink(top_rows=view.rows - 1, 0, 0, 0), false);
        menuBar.render(view, menuBarHasFocus); // can paint over main view, for menus
        if (!popupStack.length) return;
        // render bottom to top
        for (widget in popupStack[0 .. $ - 1])
            widget.render(view, false);
        popupStack[$ - 1].render(view, true);
    }

    override void input(InputEvent event) {
        if (menuBarHasFocus)
            return menuBar.input(event);
        if (!popupStack.length)
            return mainView.input(event);
        auto lastPopup = popupStack[$ - 1];
        lastPopup.input(event);
    }
}

class ConnectDialog : ListDialog {
    Application app;
    InputField server;
    InputField channel;
    InputField nick;
    this(this.app) {
        server = new InputField("irc.libera.chat:6667");
        channel = new InputField("#lesswrong");
        nick = new InputField("feep[neat]");
        this.entries = [
            ListEntry("Server", server),
            ListEntry("Channel", channel),
            ListEntry("Nickname", nick)];
        position = 0;
    }
    override void cancel() {
        this.app.ui.removePopup(this);
    }
    override void ok() {
        import std.string : atoi;

        this.app.ui.removePopup(this);
        string host = server.line.split(":")[0];
        this.app.nick = nick.line;
        this.app.channel = channel.line;
        int port = server.line.split(":")[1].atoi;
        with (this.app.irc) {
            connect(host, port);
            string line = nick.line;
            sendln("NICK " ~ line);
            sendln("USER " ~ line ~ " * * :feep's neat TUI client");
            while (!ready) {
                pump;
            }
            sendln("JOIN " ~ channel.line);
        }
        this.app.connected = true;
    }
}

void main() {
    print("Starting.");

    /*auto term = new Terminal(new StatusBar);
    setlocale(__LC_ALL, "".toStringz);
    term.enableRawMode;
    keyDebugLoop;
    term.disableRawMode;
    return;*/

    auto irc = new IRC;
    auto app = new Application(irc);
    auto term = new Terminal(app.ui);
    app.term = term;

    term.updateLoop(app);
}

void printPrettyBox(View view) {
    view.go(0, 0).print("┌");
    for (i in 0 .. view.cols - 2) {
        view.print("─");
    }
    view.print("┐");
    for (i in 1 .. view.rows) {
        int i = cast(int) i;
        view.go(i, 0).print("│");
        view.go(i, -1).print("│");
    }
    view.go(-1, 0).print("└");
    for (i in 0 .. view.cols - 2) {
        view.print("─");
    }
    view.print("┘");
}

// Amount of tiles needed to render the text
int tileLength(string text) {
    // TODO full-width characters
    // TODO filter ansi
    return text.utf8Length;
}

// return an n-tile length prefix of text.
string takeTiles(string text, int length) {
    // TODO full-width characters
    // TODO filter ansi
    mut int offset;
    while (offset < text.length && offset + text[offset .. $].utf8NextLength <= length)
    {
        offset += text[offset .. $].utf8NextLength;
    }
    return text[0 .. offset];
}

void keyDebugLoop() {
    mut int c;
    while (cast(char) c != "q"[0]) {
        c = getwchar;
        if (c == -1 && neat_runtime_errno() == 84) {
            print("EILSEQ");
            assert(false);
        }
        if (c == 0) continue;
        if (iscntrl(c)) {
            print(itoa(c));
        } else {
            auto buffer = new char[](16);
            int len = wctomb(buffer.ptr, c);
            print(itoa(c) ~ " (" ~ buffer[0 .. len] ~ ")");
        }
    }
}

int min(int a, int b) {
    if (a < b) return a;
    return b;
}
