module utf;

macro import neat.macros.assert;

// TODO std.uni, by-codepoint iteration
int utf8NextLength(string text)
{
    // see https://en.wikipedia.org/wiki/UTF-8#FSS-UTF
    if (text.length < 1) return 0;
    int ch0 = text[0];
    if (ch0 < 128) return 1;
    assert(ch0 >= 192);
    assert(text.length >= 2);
    if (ch0 < 224) return 2;
    assert(text.length >= 3);
    if (ch0 < 240) return 3;
    assert(text.length >= 4);
    if (ch0 < 248) return 4;
    assert(text.length >= 5);
    if (ch0 < 252) return 5;
    assert(text.length >= 6);
    if (ch0 < 254) return 6;
    assert(false);
}

int utf8LastLength(string text)
{
    mut size_t end = text.length;
    // 0b10xxxxxx
    while (end > 0 && (cast(int) text[end - 1]) & 192 == 128) {
        end -= 1;
    }
    assert(end > 0);
    end -= 1;
    return cast(int) (text.length - end);
}

string utf8RemoveLastCode(string text)
{
    return text[0 .. text.utf8LastLength];
}

int utf8Length(mut string text) {
    mut int i;
    while (text.length) {
        i += 1;
        text = text[text.utf8NextLength .. $];
    }
    return i;
}
